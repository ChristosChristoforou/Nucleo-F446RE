ARM GAS  /tmp/ccO8TAam.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	NMI_Handler:
  27              	.LFB130:
  28              		.file 1 "Core/Src/stm32f4xx_it.c"
   1:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f4xx_it.c **** /**
   3:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Core/Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f4xx_it.c ****   * @attention
   8:Core/Src/stm32f4xx_it.c ****   *
   9:Core/Src/stm32f4xx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32f4xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f4xx_it.c ****   *
  12:Core/Src/stm32f4xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f4xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f4xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f4xx_it.c ****   *
  16:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f4xx_it.c ****   */
  18:Core/Src/stm32f4xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f4xx_it.c **** 
  20:Core/Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f4xx_it.c **** #include "main.h"
  22:Core/Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  23:Core/Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32f4xx_it.c **** 
  27:Core/Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32f4xx_it.c **** 
  30:Core/Src/stm32f4xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/ccO8TAam.s 			page 2


  31:Core/Src/stm32f4xx_it.c **** 
  32:Core/Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32f4xx_it.c **** 
  35:Core/Src/stm32f4xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32f4xx_it.c **** 
  37:Core/Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32f4xx_it.c **** 
  40:Core/Src/stm32f4xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32f4xx_it.c **** 
  42:Core/Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32f4xx_it.c **** 
  45:Core/Src/stm32f4xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32f4xx_it.c **** 
  47:Core/Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32f4xx_it.c **** 
  50:Core/Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32f4xx_it.c **** 
  52:Core/Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32f4xx_it.c **** 
  55:Core/Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32f4xx_it.c **** 
  57:Core/Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  59:Core/Src/stm32f4xx_it.c **** extern QSPI_HandleTypeDef hqspi;
  60:Core/Src/stm32f4xx_it.c **** extern SPI_HandleTypeDef hspi2;
  61:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  62:Core/Src/stm32f4xx_it.c **** 
  63:Core/Src/stm32f4xx_it.c **** /* USER CODE END EV */
  64:Core/Src/stm32f4xx_it.c **** 
  65:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  66:Core/Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  67:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32f4xx_it.c **** /**
  69:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Core/Src/stm32f4xx_it.c ****   */
  71:Core/Src/stm32f4xx_it.c **** void NMI_Handler(void)
  72:Core/Src/stm32f4xx_it.c **** {
  29              		.loc 1 72 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  73:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  74:Core/Src/stm32f4xx_it.c **** 
  75:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Core/Src/stm32f4xx_it.c ****   while (1)
  36              		.loc 1 77 3 discriminator 1 view .LVU1
  78:Core/Src/stm32f4xx_it.c ****   {
  79:Core/Src/stm32f4xx_it.c ****   }
ARM GAS  /tmp/ccO8TAam.s 			page 3


  37              		.loc 1 79 3 discriminator 1 view .LVU2
  77:Core/Src/stm32f4xx_it.c ****   {
  38              		.loc 1 77 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE130:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	HardFault_Handler:
  52              	.LFB131:
  80:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Core/Src/stm32f4xx_it.c **** }
  82:Core/Src/stm32f4xx_it.c **** 
  83:Core/Src/stm32f4xx_it.c **** /**
  84:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Core/Src/stm32f4xx_it.c ****   */
  86:Core/Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  87:Core/Src/stm32f4xx_it.c **** {
  53              		.loc 1 87 1 view -0
  54              		.cfi_startproc
  55              		@ Volatile: function does not return.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.L4:
  88:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Core/Src/stm32f4xx_it.c **** 
  90:Core/Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Core/Src/stm32f4xx_it.c ****   while (1)
  60              		.loc 1 91 3 discriminator 1 view .LVU5
  92:Core/Src/stm32f4xx_it.c ****   {
  93:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  95:Core/Src/stm32f4xx_it.c ****   }
  61              		.loc 1 95 3 discriminator 1 view .LVU6
  91:Core/Src/stm32f4xx_it.c ****   {
  62              		.loc 1 91 9 discriminator 1 view .LVU7
  63 0000 FEE7     		b	.L4
  64              		.cfi_endproc
  65              	.LFE131:
  67              		.section	.text.MemManage_Handler,"ax",%progbits
  68              		.align	1
  69              		.global	MemManage_Handler
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	MemManage_Handler:
  76              	.LFB132:
  96:Core/Src/stm32f4xx_it.c **** }
  97:Core/Src/stm32f4xx_it.c **** 
  98:Core/Src/stm32f4xx_it.c **** /**
ARM GAS  /tmp/ccO8TAam.s 			page 4


  99:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 100:Core/Src/stm32f4xx_it.c ****   */
 101:Core/Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 102:Core/Src/stm32f4xx_it.c **** {
  77              		.loc 1 102 1 view -0
  78              		.cfi_startproc
  79              		@ Volatile: function does not return.
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.L6:
 103:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 104:Core/Src/stm32f4xx_it.c **** 
 105:Core/Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 106:Core/Src/stm32f4xx_it.c ****   while (1)
  84              		.loc 1 106 3 discriminator 1 view .LVU9
 107:Core/Src/stm32f4xx_it.c ****   {
 108:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 109:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 110:Core/Src/stm32f4xx_it.c ****   }
  85              		.loc 1 110 3 discriminator 1 view .LVU10
 106:Core/Src/stm32f4xx_it.c ****   {
  86              		.loc 1 106 9 discriminator 1 view .LVU11
  87 0000 FEE7     		b	.L6
  88              		.cfi_endproc
  89              	.LFE132:
  91              		.section	.text.BusFault_Handler,"ax",%progbits
  92              		.align	1
  93              		.global	BusFault_Handler
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv4-sp-d16
  99              	BusFault_Handler:
 100              	.LFB133:
 111:Core/Src/stm32f4xx_it.c **** }
 112:Core/Src/stm32f4xx_it.c **** 
 113:Core/Src/stm32f4xx_it.c **** /**
 114:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 115:Core/Src/stm32f4xx_it.c ****   */
 116:Core/Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 117:Core/Src/stm32f4xx_it.c **** {
 101              		.loc 1 117 1 view -0
 102              		.cfi_startproc
 103              		@ Volatile: function does not return.
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.L8:
 118:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 119:Core/Src/stm32f4xx_it.c **** 
 120:Core/Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 121:Core/Src/stm32f4xx_it.c ****   while (1)
 108              		.loc 1 121 3 discriminator 1 view .LVU13
 122:Core/Src/stm32f4xx_it.c ****   {
 123:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 124:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
ARM GAS  /tmp/ccO8TAam.s 			page 5


 125:Core/Src/stm32f4xx_it.c ****   }
 109              		.loc 1 125 3 discriminator 1 view .LVU14
 121:Core/Src/stm32f4xx_it.c ****   {
 110              		.loc 1 121 9 discriminator 1 view .LVU15
 111 0000 FEE7     		b	.L8
 112              		.cfi_endproc
 113              	.LFE133:
 115              		.section	.text.UsageFault_Handler,"ax",%progbits
 116              		.align	1
 117              		.global	UsageFault_Handler
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	UsageFault_Handler:
 124              	.LFB134:
 126:Core/Src/stm32f4xx_it.c **** }
 127:Core/Src/stm32f4xx_it.c **** 
 128:Core/Src/stm32f4xx_it.c **** /**
 129:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 130:Core/Src/stm32f4xx_it.c ****   */
 131:Core/Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 132:Core/Src/stm32f4xx_it.c **** {
 125              		.loc 1 132 1 view -0
 126              		.cfi_startproc
 127              		@ Volatile: function does not return.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.L10:
 133:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 134:Core/Src/stm32f4xx_it.c **** 
 135:Core/Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 136:Core/Src/stm32f4xx_it.c ****   while (1)
 132              		.loc 1 136 3 discriminator 1 view .LVU17
 137:Core/Src/stm32f4xx_it.c ****   {
 138:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 139:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 140:Core/Src/stm32f4xx_it.c ****   }
 133              		.loc 1 140 3 discriminator 1 view .LVU18
 136:Core/Src/stm32f4xx_it.c ****   {
 134              		.loc 1 136 9 discriminator 1 view .LVU19
 135 0000 FEE7     		b	.L10
 136              		.cfi_endproc
 137              	.LFE134:
 139              		.section	.text.SVC_Handler,"ax",%progbits
 140              		.align	1
 141              		.global	SVC_Handler
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv4-sp-d16
 147              	SVC_Handler:
 148              	.LFB135:
 141:Core/Src/stm32f4xx_it.c **** }
 142:Core/Src/stm32f4xx_it.c **** 
 143:Core/Src/stm32f4xx_it.c **** /**
ARM GAS  /tmp/ccO8TAam.s 			page 6


 144:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 145:Core/Src/stm32f4xx_it.c ****   */
 146:Core/Src/stm32f4xx_it.c **** void SVC_Handler(void)
 147:Core/Src/stm32f4xx_it.c **** {
 149              		.loc 1 147 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 148:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 149:Core/Src/stm32f4xx_it.c **** 
 150:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 151:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 152:Core/Src/stm32f4xx_it.c **** 
 153:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 154:Core/Src/stm32f4xx_it.c **** }
 154              		.loc 1 154 1 view .LVU21
 155 0000 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE135:
 159              		.section	.text.DebugMon_Handler,"ax",%progbits
 160              		.align	1
 161              		.global	DebugMon_Handler
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu fpv4-sp-d16
 167              	DebugMon_Handler:
 168              	.LFB136:
 155:Core/Src/stm32f4xx_it.c **** 
 156:Core/Src/stm32f4xx_it.c **** /**
 157:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 158:Core/Src/stm32f4xx_it.c ****   */
 159:Core/Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 160:Core/Src/stm32f4xx_it.c **** {
 169              		.loc 1 160 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 161:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 162:Core/Src/stm32f4xx_it.c **** 
 163:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 164:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 165:Core/Src/stm32f4xx_it.c **** 
 166:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 167:Core/Src/stm32f4xx_it.c **** }
 174              		.loc 1 167 1 view .LVU23
 175 0000 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE136:
 179              		.section	.text.PendSV_Handler,"ax",%progbits
 180              		.align	1
 181              		.global	PendSV_Handler
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
ARM GAS  /tmp/ccO8TAam.s 			page 7


 185              		.fpu fpv4-sp-d16
 187              	PendSV_Handler:
 188              	.LFB137:
 168:Core/Src/stm32f4xx_it.c **** 
 169:Core/Src/stm32f4xx_it.c **** /**
 170:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pendable request for system service.
 171:Core/Src/stm32f4xx_it.c ****   */
 172:Core/Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 173:Core/Src/stm32f4xx_it.c **** {
 189              		.loc 1 173 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 174:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 175:Core/Src/stm32f4xx_it.c **** 
 176:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 177:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 178:Core/Src/stm32f4xx_it.c **** 
 179:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 180:Core/Src/stm32f4xx_it.c **** }
 194              		.loc 1 180 1 view .LVU25
 195 0000 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE137:
 199              		.section	.text.SysTick_Handler,"ax",%progbits
 200              		.align	1
 201              		.global	SysTick_Handler
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu fpv4-sp-d16
 207              	SysTick_Handler:
 208              	.LFB138:
 181:Core/Src/stm32f4xx_it.c **** 
 182:Core/Src/stm32f4xx_it.c **** /**
 183:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System tick timer.
 184:Core/Src/stm32f4xx_it.c ****   */
 185:Core/Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 186:Core/Src/stm32f4xx_it.c **** {
 209              		.loc 1 186 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213 0000 08B5     		push	{r3, lr}
 214              	.LCFI0:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 3, -8
 217              		.cfi_offset 14, -4
 187:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 188:Core/Src/stm32f4xx_it.c **** 
 189:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 190:Core/Src/stm32f4xx_it.c ****   HAL_IncTick();
 218              		.loc 1 190 3 view .LVU27
 219 0002 FFF7FEFF 		bl	HAL_IncTick
 220              	.LVL0:
 191:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
ARM GAS  /tmp/ccO8TAam.s 			page 8


 192:Core/Src/stm32f4xx_it.c **** 
 193:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 194:Core/Src/stm32f4xx_it.c **** }
 221              		.loc 1 194 1 is_stmt 0 view .LVU28
 222 0006 08BD     		pop	{r3, pc}
 223              		.cfi_endproc
 224              	.LFE138:
 226              		.section	.text.FLASH_IRQHandler,"ax",%progbits
 227              		.align	1
 228              		.global	FLASH_IRQHandler
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	FLASH_IRQHandler:
 235              	.LFB139:
 195:Core/Src/stm32f4xx_it.c **** 
 196:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 197:Core/Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 198:Core/Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 199:Core/Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 200:Core/Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 201:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 202:Core/Src/stm32f4xx_it.c **** 
 203:Core/Src/stm32f4xx_it.c **** /**
 204:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Flash global interrupt.
 205:Core/Src/stm32f4xx_it.c ****   */
 206:Core/Src/stm32f4xx_it.c **** void FLASH_IRQHandler(void)
 207:Core/Src/stm32f4xx_it.c **** {
 236              		.loc 1 207 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 08B5     		push	{r3, lr}
 241              	.LCFI1:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 3, -8
 244              		.cfi_offset 14, -4
 208:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN FLASH_IRQn 0 */
 209:Core/Src/stm32f4xx_it.c **** 
 210:Core/Src/stm32f4xx_it.c ****   /* USER CODE END FLASH_IRQn 0 */
 211:Core/Src/stm32f4xx_it.c ****   HAL_FLASH_IRQHandler();
 245              		.loc 1 211 3 view .LVU30
 246 0002 FFF7FEFF 		bl	HAL_FLASH_IRQHandler
 247              	.LVL1:
 212:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN FLASH_IRQn 1 */
 213:Core/Src/stm32f4xx_it.c **** 
 214:Core/Src/stm32f4xx_it.c ****   /* USER CODE END FLASH_IRQn 1 */
 215:Core/Src/stm32f4xx_it.c **** }
 248              		.loc 1 215 1 is_stmt 0 view .LVU31
 249 0006 08BD     		pop	{r3, pc}
 250              		.cfi_endproc
 251              	.LFE139:
 253              		.section	.text.RCC_IRQHandler,"ax",%progbits
 254              		.align	1
 255              		.global	RCC_IRQHandler
 256              		.syntax unified
ARM GAS  /tmp/ccO8TAam.s 			page 9


 257              		.thumb
 258              		.thumb_func
 259              		.fpu fpv4-sp-d16
 261              	RCC_IRQHandler:
 262              	.LFB140:
 216:Core/Src/stm32f4xx_it.c **** 
 217:Core/Src/stm32f4xx_it.c **** /**
 218:Core/Src/stm32f4xx_it.c ****   * @brief This function handles RCC global interrupt.
 219:Core/Src/stm32f4xx_it.c ****   */
 220:Core/Src/stm32f4xx_it.c **** void RCC_IRQHandler(void)
 221:Core/Src/stm32f4xx_it.c **** {
 263              		.loc 1 221 1 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 222:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN RCC_IRQn 0 */
 223:Core/Src/stm32f4xx_it.c **** 
 224:Core/Src/stm32f4xx_it.c ****   /* USER CODE END RCC_IRQn 0 */
 225:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN RCC_IRQn 1 */
 226:Core/Src/stm32f4xx_it.c **** 
 227:Core/Src/stm32f4xx_it.c ****   /* USER CODE END RCC_IRQn 1 */
 228:Core/Src/stm32f4xx_it.c **** }
 268              		.loc 1 228 1 view .LVU33
 269 0000 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE140:
 273              		.section	.text.CAN1_TX_IRQHandler,"ax",%progbits
 274              		.align	1
 275              		.global	CAN1_TX_IRQHandler
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu fpv4-sp-d16
 281              	CAN1_TX_IRQHandler:
 282              	.LFB141:
 229:Core/Src/stm32f4xx_it.c **** 
 230:Core/Src/stm32f4xx_it.c **** /**
 231:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 TX interrupt.
 232:Core/Src/stm32f4xx_it.c ****   */
 233:Core/Src/stm32f4xx_it.c **** void CAN1_TX_IRQHandler(void)
 234:Core/Src/stm32f4xx_it.c **** {
 283              		.loc 1 234 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287 0000 08B5     		push	{r3, lr}
 288              	.LCFI2:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 3, -8
 291              		.cfi_offset 14, -4
 235:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 0 */
 236:Core/Src/stm32f4xx_it.c **** 
 237:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 0 */
 238:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 292              		.loc 1 238 3 view .LVU35
 293 0002 0248     		ldr	r0, .L21
ARM GAS  /tmp/ccO8TAam.s 			page 10


 294 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 295              	.LVL2:
 239:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 1 */
 240:Core/Src/stm32f4xx_it.c **** 
 241:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 1 */
 242:Core/Src/stm32f4xx_it.c **** }
 296              		.loc 1 242 1 is_stmt 0 view .LVU36
 297 0008 08BD     		pop	{r3, pc}
 298              	.L22:
 299 000a 00BF     		.align	2
 300              	.L21:
 301 000c 00000000 		.word	hcan1
 302              		.cfi_endproc
 303              	.LFE141:
 305              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 306              		.align	1
 307              		.global	CAN1_RX0_IRQHandler
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
 311              		.fpu fpv4-sp-d16
 313              	CAN1_RX0_IRQHandler:
 314              	.LFB142:
 243:Core/Src/stm32f4xx_it.c **** 
 244:Core/Src/stm32f4xx_it.c **** /**
 245:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupt.
 246:Core/Src/stm32f4xx_it.c ****   */
 247:Core/Src/stm32f4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 248:Core/Src/stm32f4xx_it.c **** {
 315              		.loc 1 248 1 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319 0000 08B5     		push	{r3, lr}
 320              	.LCFI3:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 3, -8
 323              		.cfi_offset 14, -4
 249:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 250:Core/Src/stm32f4xx_it.c **** 
 251:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 252:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 324              		.loc 1 252 3 view .LVU38
 325 0002 0248     		ldr	r0, .L25
 326 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 327              	.LVL3:
 253:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 254:Core/Src/stm32f4xx_it.c **** 
 255:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 256:Core/Src/stm32f4xx_it.c **** }
 328              		.loc 1 256 1 is_stmt 0 view .LVU39
 329 0008 08BD     		pop	{r3, pc}
 330              	.L26:
 331 000a 00BF     		.align	2
 332              	.L25:
 333 000c 00000000 		.word	hcan1
 334              		.cfi_endproc
ARM GAS  /tmp/ccO8TAam.s 			page 11


 335              	.LFE142:
 337              		.section	.text.CAN1_RX1_IRQHandler,"ax",%progbits
 338              		.align	1
 339              		.global	CAN1_RX1_IRQHandler
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 343              		.fpu fpv4-sp-d16
 345              	CAN1_RX1_IRQHandler:
 346              	.LFB143:
 257:Core/Src/stm32f4xx_it.c **** 
 258:Core/Src/stm32f4xx_it.c **** /**
 259:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX1 interrupt.
 260:Core/Src/stm32f4xx_it.c ****   */
 261:Core/Src/stm32f4xx_it.c **** void CAN1_RX1_IRQHandler(void)
 262:Core/Src/stm32f4xx_it.c **** {
 347              		.loc 1 262 1 is_stmt 1 view -0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351 0000 08B5     		push	{r3, lr}
 352              	.LCFI4:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 3, -8
 355              		.cfi_offset 14, -4
 263:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
 264:Core/Src/stm32f4xx_it.c **** 
 265:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 0 */
 266:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 356              		.loc 1 266 3 view .LVU41
 357 0002 0248     		ldr	r0, .L29
 358 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 359              	.LVL4:
 267:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
 268:Core/Src/stm32f4xx_it.c **** 
 269:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 1 */
 270:Core/Src/stm32f4xx_it.c **** }
 360              		.loc 1 270 1 is_stmt 0 view .LVU42
 361 0008 08BD     		pop	{r3, pc}
 362              	.L30:
 363 000a 00BF     		.align	2
 364              	.L29:
 365 000c 00000000 		.word	hcan1
 366              		.cfi_endproc
 367              	.LFE143:
 369              		.section	.text.CAN1_SCE_IRQHandler,"ax",%progbits
 370              		.align	1
 371              		.global	CAN1_SCE_IRQHandler
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu fpv4-sp-d16
 377              	CAN1_SCE_IRQHandler:
 378              	.LFB144:
 271:Core/Src/stm32f4xx_it.c **** 
 272:Core/Src/stm32f4xx_it.c **** /**
 273:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 SCE interrupt.
ARM GAS  /tmp/ccO8TAam.s 			page 12


 274:Core/Src/stm32f4xx_it.c ****   */
 275:Core/Src/stm32f4xx_it.c **** void CAN1_SCE_IRQHandler(void)
 276:Core/Src/stm32f4xx_it.c **** {
 379              		.loc 1 276 1 is_stmt 1 view -0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383 0000 08B5     		push	{r3, lr}
 384              	.LCFI5:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 3, -8
 387              		.cfi_offset 14, -4
 277:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
 278:Core/Src/stm32f4xx_it.c **** 
 279:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_SCE_IRQn 0 */
 280:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 388              		.loc 1 280 3 view .LVU44
 389 0002 0248     		ldr	r0, .L33
 390 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 391              	.LVL5:
 281:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
 282:Core/Src/stm32f4xx_it.c **** 
 283:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_SCE_IRQn 1 */
 284:Core/Src/stm32f4xx_it.c **** }
 392              		.loc 1 284 1 is_stmt 0 view .LVU45
 393 0008 08BD     		pop	{r3, pc}
 394              	.L34:
 395 000a 00BF     		.align	2
 396              	.L33:
 397 000c 00000000 		.word	hcan1
 398              		.cfi_endproc
 399              	.LFE144:
 401              		.section	.text.SPI2_IRQHandler,"ax",%progbits
 402              		.align	1
 403              		.global	SPI2_IRQHandler
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu fpv4-sp-d16
 409              	SPI2_IRQHandler:
 410              	.LFB145:
 285:Core/Src/stm32f4xx_it.c **** 
 286:Core/Src/stm32f4xx_it.c **** /**
 287:Core/Src/stm32f4xx_it.c ****   * @brief This function handles SPI2 global interrupt.
 288:Core/Src/stm32f4xx_it.c ****   */
 289:Core/Src/stm32f4xx_it.c **** void SPI2_IRQHandler(void)
 290:Core/Src/stm32f4xx_it.c **** {
 411              		.loc 1 290 1 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415 0000 08B5     		push	{r3, lr}
 416              	.LCFI6:
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 3, -8
 419              		.cfi_offset 14, -4
 291:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 0 */
ARM GAS  /tmp/ccO8TAam.s 			page 13


 292:Core/Src/stm32f4xx_it.c **** 
 293:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SPI2_IRQn 0 */
 294:Core/Src/stm32f4xx_it.c ****   HAL_SPI_IRQHandler(&hspi2);
 420              		.loc 1 294 3 view .LVU47
 421 0002 0248     		ldr	r0, .L37
 422 0004 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 423              	.LVL6:
 295:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SPI2_IRQn 1 */
 296:Core/Src/stm32f4xx_it.c **** 
 297:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SPI2_IRQn 1 */
 298:Core/Src/stm32f4xx_it.c **** }
 424              		.loc 1 298 1 is_stmt 0 view .LVU48
 425 0008 08BD     		pop	{r3, pc}
 426              	.L38:
 427 000a 00BF     		.align	2
 428              	.L37:
 429 000c 00000000 		.word	hspi2
 430              		.cfi_endproc
 431              	.LFE145:
 433              		.section	.text.FPU_IRQHandler,"ax",%progbits
 434              		.align	1
 435              		.global	FPU_IRQHandler
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	FPU_IRQHandler:
 442              	.LFB146:
 299:Core/Src/stm32f4xx_it.c **** 
 300:Core/Src/stm32f4xx_it.c **** /**
 301:Core/Src/stm32f4xx_it.c ****   * @brief This function handles FPU global interrupt.
 302:Core/Src/stm32f4xx_it.c ****   */
 303:Core/Src/stm32f4xx_it.c **** void FPU_IRQHandler(void)
 304:Core/Src/stm32f4xx_it.c **** {
 443              		.loc 1 304 1 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 305:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN FPU_IRQn 0 */
 306:Core/Src/stm32f4xx_it.c **** 
 307:Core/Src/stm32f4xx_it.c ****   /* USER CODE END FPU_IRQn 0 */
 308:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN FPU_IRQn 1 */
 309:Core/Src/stm32f4xx_it.c **** 
 310:Core/Src/stm32f4xx_it.c ****   /* USER CODE END FPU_IRQn 1 */
 311:Core/Src/stm32f4xx_it.c **** }
 448              		.loc 1 311 1 view .LVU50
 449 0000 7047     		bx	lr
 450              		.cfi_endproc
 451              	.LFE146:
 453              		.section	.text.QUADSPI_IRQHandler,"ax",%progbits
 454              		.align	1
 455              		.global	QUADSPI_IRQHandler
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccO8TAam.s 			page 14


 461              	QUADSPI_IRQHandler:
 462              	.LFB147:
 312:Core/Src/stm32f4xx_it.c **** 
 313:Core/Src/stm32f4xx_it.c **** /**
 314:Core/Src/stm32f4xx_it.c ****   * @brief This function handles QUADSPI global interrupt.
 315:Core/Src/stm32f4xx_it.c ****   */
 316:Core/Src/stm32f4xx_it.c **** void QUADSPI_IRQHandler(void)
 317:Core/Src/stm32f4xx_it.c **** {
 463              		.loc 1 317 1 view -0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467 0000 08B5     		push	{r3, lr}
 468              	.LCFI7:
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 3, -8
 471              		.cfi_offset 14, -4
 318:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN QUADSPI_IRQn 0 */
 319:Core/Src/stm32f4xx_it.c **** 
 320:Core/Src/stm32f4xx_it.c ****   /* USER CODE END QUADSPI_IRQn 0 */
 321:Core/Src/stm32f4xx_it.c ****   HAL_QSPI_IRQHandler(&hqspi);
 472              		.loc 1 321 3 view .LVU52
 473 0002 0248     		ldr	r0, .L42
 474 0004 FFF7FEFF 		bl	HAL_QSPI_IRQHandler
 475              	.LVL7:
 322:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN QUADSPI_IRQn 1 */
 323:Core/Src/stm32f4xx_it.c **** 
 324:Core/Src/stm32f4xx_it.c ****   /* USER CODE END QUADSPI_IRQn 1 */
 325:Core/Src/stm32f4xx_it.c **** }
 476              		.loc 1 325 1 is_stmt 0 view .LVU53
 477 0008 08BD     		pop	{r3, pc}
 478              	.L43:
 479 000a 00BF     		.align	2
 480              	.L42:
 481 000c 00000000 		.word	hqspi
 482              		.cfi_endproc
 483              	.LFE147:
 485              		.text
 486              	.Letext0:
 487              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 488              		.file 3 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/CMSIS/Inc
 489              		.file 4 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/CMSIS/Dev
 490              		.file 5 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/CMSIS/Dev
 491              		.file 6 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/CMSIS/Dev
 492              		.file 7 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/STM32F4xx
 493              		.file 8 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/STM32F4xx
 494              		.file 9 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/STM32F4xx
 495              		.file 10 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/STM32F4x
 496              		.file 11 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/STM32F4x
 497              		.file 12 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/STM32F4x
 498              		.file 13 "/home/christoschristoforou/STM32Cube/Repository/STM32Cube_FW_F4_V1.27.0/Drivers/STM32F4x
ARM GAS  /tmp/ccO8TAam.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccO8TAam.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccO8TAam.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:51     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccO8TAam.s:68     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:75     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccO8TAam.s:92     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:99     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccO8TAam.s:116    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:123    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccO8TAam.s:140    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:147    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccO8TAam.s:160    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:167    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccO8TAam.s:180    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:187    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccO8TAam.s:200    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccO8TAam.s:207    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccO8TAam.s:227    .text.FLASH_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:234    .text.FLASH_IRQHandler:0000000000000000 FLASH_IRQHandler
     /tmp/ccO8TAam.s:254    .text.RCC_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:261    .text.RCC_IRQHandler:0000000000000000 RCC_IRQHandler
     /tmp/ccO8TAam.s:274    .text.CAN1_TX_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:281    .text.CAN1_TX_IRQHandler:0000000000000000 CAN1_TX_IRQHandler
     /tmp/ccO8TAam.s:301    .text.CAN1_TX_IRQHandler:000000000000000c $d
     /tmp/ccO8TAam.s:306    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:313    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccO8TAam.s:333    .text.CAN1_RX0_IRQHandler:000000000000000c $d
     /tmp/ccO8TAam.s:338    .text.CAN1_RX1_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:345    .text.CAN1_RX1_IRQHandler:0000000000000000 CAN1_RX1_IRQHandler
     /tmp/ccO8TAam.s:365    .text.CAN1_RX1_IRQHandler:000000000000000c $d
     /tmp/ccO8TAam.s:370    .text.CAN1_SCE_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:377    .text.CAN1_SCE_IRQHandler:0000000000000000 CAN1_SCE_IRQHandler
     /tmp/ccO8TAam.s:397    .text.CAN1_SCE_IRQHandler:000000000000000c $d
     /tmp/ccO8TAam.s:402    .text.SPI2_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:409    .text.SPI2_IRQHandler:0000000000000000 SPI2_IRQHandler
     /tmp/ccO8TAam.s:429    .text.SPI2_IRQHandler:000000000000000c $d
     /tmp/ccO8TAam.s:434    .text.FPU_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:441    .text.FPU_IRQHandler:0000000000000000 FPU_IRQHandler
     /tmp/ccO8TAam.s:454    .text.QUADSPI_IRQHandler:0000000000000000 $t
     /tmp/ccO8TAam.s:461    .text.QUADSPI_IRQHandler:0000000000000000 QUADSPI_IRQHandler
     /tmp/ccO8TAam.s:481    .text.QUADSPI_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_FLASH_IRQHandler
HAL_CAN_IRQHandler
hcan1
HAL_SPI_IRQHandler
hspi2
HAL_QSPI_IRQHandler
hqspi
